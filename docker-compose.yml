services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15
    container_name: hotel_db
    environment:
      POSTGRES_DB: hotel
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hotel_network

  # Backend Django
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: hotel_backend
    command: sh -lc "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - hotel_network
    

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hotel_frontend
    command: sh -lc "npm ci --no-audit --no-fund || npm install --no-audit --no-fund && npm run dev -- --host"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - hotel_network

  # Redis para cache y tareas as√≠ncronas
  redis:
    image: redis:7-alpine
    container_name: hotel_redis
    ports:
      - "6379:6379"
    networks:
      - hotel_network

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hotel_celery
    command: celery -A hotel worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_started
      db:
        condition: service_healthy
    networks:
      - hotel_network

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hotel_celery_beat
    command: celery -A hotel beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_started
      db:
        condition: service_healthy
    networks:
      - hotel_network

volumes:
  postgres_data:
  frontend_node_modules:

networks:
  hotel_network:
    driver: bridge